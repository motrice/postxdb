For a functional setup you will need to configure first Postxdb, and then Orbeon.

h4. The Postxdb Configuration File

Without explicit configuration Postxdb runs towards its built-in H2 database and without notifications.

An explicit configuration is a @.properties@ file formatted according to @java.util.Properties@.
Create this file in a location reachable and readable only by the user running the servlet container.

In order to point Postxdb to the configuration file you may use either a JVM system property or an environment variable.
System properties and environment variables are examined in the following order.
The first one that is defined is used.

1. A system property named @POSTXDB_CONF@
1. An environment variable named @POSTXDB_CONF@
1. A system property named @MOTRICE_CONF@
1. An environment variable named @MOTRICE_CONF@

The file @/usr/local/etc/motrice/motrice.properties@ is used if none of the above is defined.
If that file does not exist, or is not readable, the fallback configuration with a built-in H2 database is used.

h4. Configuration Entries

Database configuration is one of the main parts of a Postxdb setup.
Here is a sample configuration with variable parts in curly braces.
{code:properties}
dataSource.driverClassName = org.postgresql.Driver
dataSource.url = jdbc:postgresql://{host}:{port}/{database name}
dataSource.username = {username}
dataSource.password = {password}
dataSource.dbCreate = update
#dataSource.logSql = true
{code}

This configuration uses the PostgreSQL database.
The driver class name and datasource URL will look different for other databases.

If you want the Postxdb GUI to be able to run forms with the Orbeon Form Builder and Form Runner,
then add the following configuration entries.
Modify accordingly if Orbeon does not run on @localhost:8080@
{code}
postxdb.formBuilder.urlBase = http://localhost:8080/orbeon/fr/orbeon/builder
postxdb.formRunner.urlBase = http://localhost:8080/orbeon/fr
{code}

If you want storage notifications, then add the following configuration entries.
{code}
postxdb.callback.source.port = 25759
postxdb.callback.destination.port = 25758
{code}

This example means that Postxdb uses port 25759 to send notifications.
It will send them to port 25758 on the same host.
It is not possible (nor advisable at this stage) to send notifications to other hosts.

h4. Postxdb Build Configuration

A configuration must be defined if you build Postxdb.
You specify the configuration file the same way as described above.
The main difference is that you need a separate test database unless you turn off all testing during the build.
Create the database the same way you created the main database, but do not create any tables.
Integration tests assume they run against a completely empty database.

This is how the test database is specified:
If the normal configuration file path is @/some/directory/app-conf.properties@ then add a file in the same directory named
@test-app-conf.properties@, that is, prepend @test@ to the configuration file name.
Postxdb will read the normal configuration first, and then the test configuration.
Any entries in the test configuration override the values in the normal configuration.

For example, if the test database uses the same username and password as the main database, the test configuration
could look like this:
{code}
dataSource.url = jdbc:postgresql://{host}:{port}/{TEST database name}
dataSource.dbCreate = create-drop
{code}

If you prefer, it's perfectly possible to have a completey separate test configuration file and
change the environment variable accordingly.

The ''create-drop'' setting means that database tables will be created automatically and also dropped automatically after tests have completed.

If the test database uses a different username or password, add those properties to the test configuration file. 

If you build Postxdb without a separate test database, data will be written to whatever database is configured.
Tests will fail if you repeat them because they expect a clean database.

h4. Orbeon Configuration

This subsection only describes how you make Orbeon connect to Postxdb.
The configuration file to edit is @WEB-INF/resources/config/properties-local.xml@.
Replace existing persistence entries with the following.
{code:xml}
<property
    as="xs:string"
    name="oxf.fr.persistence.provider.*.*.*"
    value="exist"/>
  
<property 
    as="xs:anyURI" 
    name="oxf.fr.persistence.exist.uri" 
    value="/fr/service/exist"/>

<property 
    as="xs:anyURI" 
    name="oxf.fr.persistence.exist.exist-uri" 
    value="http://localhost:48080/exist/rest/db/orbeon-pe/fr"/>
{code}

This example assumes that Postxdb runs on localhost, port 48080.
Modify to suit your installation.
The part after the port number is hardwired and may not be changed.

h4. Orbeon 4.8

Orbeon 4.8 has a bug in the eXist-db interface.
Do not use it with Postxdb.

If you absolutely have to use this Orbeon version you must use Postxdb release 1.0.8
and modify the REST prefix in @properties-local.xml@.
The last property in the example above must be modified as follows.
{code:xml}
<property 
    as="xs:anyURI" 
    name="oxf.fr.persistence.exist.exist-uri" 
    value="http://localhost:48080/exist/rest/db/orbeon-48/fr"/>
{code}

Postxdb 1.0.8 lacks several features introduced in versions 1.1.0 upward.
